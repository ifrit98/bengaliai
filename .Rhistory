import pandas as pd
TRAIN = ['data/data-raw/train_image_data_0.parquet',
'data/data-raw/train_image_data_1.parquet',
'data/data-raw/train_image_data_2.parquet',
'data/data-raw/train_image_data_3.parquet']
TEST = ['data/data-raw/test_image_data_0.parquet',
'data/data-raw/test_image_data_1.parquet',
'data/data-raw/test_image_data_2.parquet',
'data/data-raw/test_image_data_3.parquet']
# train_df_ = pd.read_csv('csv/train.csv')
test_df_ = pd.read_csv('csv/test.csv')
class_map_df = pd.read_csv('csv/class_map.csv')
sample_sub_df = pd.read_csv('csv/sample_submission.csv')
def test_generator(filepaths=TEST):
for fp in filepaths:
df = pd.read_parquet(fp)
yield df
gen = test_generator()
gen
for df in gen:
DF = df
print(df)
break
df
DF
df
df.iloc[0]
df.values
df
nparray = df.values
nparray
np = df.values
np[:,1:]
np[:,0:]
np[:,1:]
df
np
np[:,1:]
np[:,1:],astype
np[:,1:]
x <- np[:,1:]
x = np[:,1:]
x
x.astype
x.astype(np.uint8)
import numpy as np
npa = df.values
x.astype(np.uint8)
x = x.astype(np.uint8)
x
df
df.iloc[0]
df.iloc[0][1:]
df.iloc[0][1:].astype(np.uint8)
df.iloc[0][1:].astype(np.uint8).values
x = df.iloc[0][1:].astype(np.uint8).values
x
def test_generator(df, img_size=128):
crop = lambda x: crop_resize(x, size=img_size)
rng = range(batch_size)
for i in range(len(df)):
image    = df.iloc[i][1:].astype(np.uint8).values
inverted = invert_and_reshape(image)
cropped  = crop(inverted)
if norm:
image = normalize(cropped)
else:
image = cropped
yield image
gen = test_generator(df)
gen
for img in gen:
print(img.shape)
for img in gen:
print(img)
def test_generator(df, img_size=128):
crop = lambda x: crop_resize(x, size=img_size)
for i in range(len(df)):
image    = df.iloc[i][1:].astype(np.uint8).values
inverted = invert_and_reshape(image)
cropped  = crop(inverted)
if norm:
image = normalize(cropped)
else:
image = cropped
yield image
gen = test_generator()
gen = test_generator(df)
for img in gen:
print(img.shape)
from python.tfrecords.tfrecord_utils import record_generator
from python.data_tools import crop_resize, normalize, invert_and_reshape
from python.data_tools import crop_resize, normalize, invert_and_reshape
from python.data_tools import crop_resize, normalize, invert_and_reshape
from python.data_tools import crop_resize, normalize, invert_and_reshape
from python.data_tools import crop_resize, normalize, invert_and_reshape
from python.data_tools import crop_resize, normalize, invert_and_reshape
from python.data_tools import crop_resize, normalize, invert_and_reshape
train_df_    = pd.read_csv('csv/train.csv')
test_df_     = pd.read_csv('csv/test.csv')
class_map_df = pd.read_csv('csv/class_map.csv')
NO_VOWELS     = len(train_df_['vowel_diacritic'].unique())
NO_CONSONANTS = len(train_df_['consonant_diacritic'].unique())
NO_GRAPHEMES  = len(train_df_['grapheme_root'].unique())
def test_generator(df, img_size=128):
crop = lambda x: crop_resize(x, size=img_size)
for i in range(len(df)):
image    = df.iloc[i][1:].astype(np.uint8).values
inverted = invert_and_reshape(image)
cropped  = crop(inverted)
if norm:
image = normalize(cropped)
else:
image = cropped
yield image
gen = test_generator()
gen = test_generator(df)
gen
for img in gen:
print(img.shape)
from python.data_tools import crop_resize, normalize, invert_and_reshape
def test_generator(df, norm=True, img_size=128):
crop = lambda x: crop_resize(x, size=img_size)
for i in range(len(df)):
image    = df.iloc[i][1:].astype(np.uint8).values
inverted = invert_and_reshape(image)
cropped  = crop(inverted)
if norm:
image = normalize(cropped)
else:
image = cropped
yield image
for img in gen:
print(img.shape)
for img in gen:
print(img.shape)
gen = test_generator()
gen = test_generator(df)
for x in gen:
print(x,shape)
x
x.shape
gen = test_generator()
gen = test_generator(df)
for x in gen:
print(x.shape)
import_from("python/tfrecords/img_generator.py", "test_generator")
library(env.utils)
import_from("python/tfrecords/img_generator.py", "test_generator")
library(env.utils)
import_from("python/tfrecords/img_generator.py", "test_generator")
import_from("python/tfrecords/img_generator.py", "test_generator")
import_from("python/tfrecords/img_generator.py", "test_generator")
gen <- test_generator()
test_generator
gen <- test_generator()
import_from("python/tfrecords/img_generator.py", "test_generator")
reticulate::source_python("python/tfrecords/img_generator.py")
test_generator
df
reticulate::repl_python()
reticulate::source_python("python/load_test_data.py")
args   <- commandArgs(TRUE)
testgen = test_generator()
for (df in testgen) {
browser()
model$predict(img)
}
reticulate::repl_python()
