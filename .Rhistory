from inst.python.data_tools import *
train_ids, train_imgs = load_as_npa(TRAIN[0])
f, ax = plt.subplots(5, 5, figsize=(16, 8))
ax = ax.flatten()
for i in range(25):
ax[i].imshow(train_imgs[i], cmap='Greys')
plt.show()
from inst.python.get_csv_data import *
train_df
train_df.head()
test_df.head()
class_map_df.head()
sample_submission_df.head()
class_map_df
class_map_df.columns
class_map_df['component_type']
class_map_df['component_type'].unique
class_map_df['component_type'].unique()
print("Number of unique grapheme_root: {}".format(train_df['grapheme_root'].nunique()))
fig = go.Figure(data=[go.Histogram(x=train_df['grapheme_root'])])
fig.update_layout(title_text='`grapheme_root` values')
fig.show()
x = train_df['grapheme_root'].value_counts().sort_values()[-20:].index
y = train_df['grapheme_root'].value_counts().sort_values()[-20:].values
fig = go.Figure(data=[go.Bar(x=x, y=y)])
fig.update_layout(title_text='Most common `grapheme_root` values')
fig.show()
common_gr = class_map_df[(class_map_df['component_type'] == 'grapheme_root') & \
(class_map_df['label'].isin(x))]['component']
common_gr
f, ax = plt.subplots(4, 5, figsize=(16, 8))
ax = ax.flatten()
for i in range(20):
ax[i].imshow(image_from_char(common_gr.values[i]), cmap='Greys')
plt.show()
train_df['grapheme_root']
train_df['grapheme_root'].value_counts
train_df['grapheme_root'].value_counts()
train_df['grapheme_root'].value_counts()[-20:]
train_df['grapheme_root'].value_counts().sort_values()
train_df['grapheme_root'].value_counts()
train_df['grapheme_root'].value_counts().sort_values()[:20]
train_df['grapheme_root'].value_counts().sort_values()[:20].index
train_df['grapheme_root'].value_counts().sort_values()[:20].values
x = train_df['grapheme_root'].value_counts().sort_values()
x
x = train_df['grapheme_root'].value_counts().sort_values()[:20].index
x
x
y
y = train_df['grapheme_root'].value_counts().sort_values()[:20].values
y
x
y
y = train_df['grapheme_root'].value_counts().sort_values()[:20]
y
y = train_df['grapheme_root'].value_counts().sort_values()[:20].values
y
x
fig = go.Figure(data=[go.Bar(x=x, y=y)])
fig
fig.update_layout(title_text='Least common `grapheme_root` values')
fig.show()
f, ax = plt.subplots(4, 5, figsize=(16, 8))
ax = ax.flatten()
for i in range(20):
ax[i].imshow(image_from_char(notcommon_gr.values[i]), cmap='Greys')
plt.show()
f, ax = plt.subplots(4, 5, figsize=(16, 8))
ax = ax.flatten()
for i in range(20):
ax[i].imshow(image_from_char(uncommon_gr.values[i]), cmap='Greys')
plt.show()
uncommon_gr = class_map_df[(class_map_df['component_type'] == 'grapheme_root') & \
(class_map_df['label'].isin(x))]['component']
f, ax = plt.subplots(4, 5, figsize=(16, 8))
ax = ax.flatten()
for i in range(20):
ax[i].imshow(image_from_char(uncommon_gr.values[i]), cmap='Greys')
plt.show()
uncommon_gr = class_map_df[(class_map_df['component_type'] == 'grapheme_root') & \
(class_map_df['label'].isin(x))]['component']
f, ax = plt.subplots(4, 5, figsize=(16, 8))
ax = ax.flatten()
for i in range(20):
ax[i].imshow(image_from_char(uncommon_gr.values[i]), cmap='Greys')
plt.title('Uncommon `graheme_root` values')
plt.show()
plt.title
ax
type(ax)
f, ax = plt.subplots(4, 5, figsize=(16, 8))
ax = ax.flatten()
for i in range(20):
ax[i].imshow(image_from_char(uncommon_gr.values[i]), cmap='Greys')
ax.title('Uncommon `graheme_root` values', loc=9)
plt.show()
uncommon_gr = class_map_df[(class_map_df['component_type'] == 'grapheme_root') & \
(class_map_df['label'].isin(x))]['component']
f, ax = plt.subplots(4, 5, figsize=(16, 8))
ax = ax.flatten()
for i in range(20):
ax[i].imshow(image_from_char(uncommon_gr.values[i]), cmap='Greys')
plt.title('Uncommon `graheme_root` values', loc=9)
plt.show()
uncommon_gr = class_map_df[(class_map_df['component_type'] == 'grapheme_root') & \
(class_map_df['label'].isin(x))]['component']
f, ax = plt.subplots(4, 5, figsize=(16, 8))
ax = ax.flatten()
for i in range(20):
ax[i].imshow(image_from_char(uncommon_gr.values[i]), cmap='Greys')
plt.title('Uncommon `graheme_root` values', loc='upper center')
plt.show()
f, ax = plt.subplots(4, 5, figsize=(16, 8))
ax = ax.flatten()
plt.title('Uncommon `graheme_root` values')
for i in range(20):
ax[i].imshow(image_from_char(uncommon_gr.values[i]), cmap='Greys')
plt.show()
f, ax = plt.subplots(4, 5, figsize=(16, 8))
ax = ax.flatten()
plt.title('Uncommon `graheme_root` values')
for i in range(20):
ax[i].imshow(image_from_char(uncommon_gr.values[i]), cmap='Greys')
plt.show()
train_df['vowel_diacritic'].nunique()
x = train_df['vowel_diacritic'].value_counts().sort_values().index
y = train_df['vowel_diacritic'].value_counts().sort_values().values
fig = go.Figure(data=[go.Bar(x=x, y=y)])
fig.update_layout(title_text='`vowel_diacritic` values')
fig.show()
train_df['consonant_diacritic'].nunique()
x = train_df['consonant_diacritic'].value_counts().sort_values().index
y = train_df['consonant_diacritic'].value_counts().sort_values().values
fig = go.Figure(data=[go.Bar(x=x, y=y)])
fig.update_layout(title_text='`consonant_diacritic` values')
fig.show()
consonants = class_map_df[(class_map_df['component_type'] == 'consonant_diacritic') & \
(class_map_df['label'].isin(x))]['component']
f, ax = plt.subplots(1, 7, figsize=(16, 8))
ax = ax.flatten()
for i in range(7):
ax[i].imshow(image_from_char(consonants.values[i]), cmap='Greys')
plt.show()
gr_root_component = class_map_df[(class_map_df['component_type'] == 'grapheme_root') & \
(class_map_df['label'] == 72)]['component']
plt.imshow(image_from_char(gr_root_component[72]), cmap='Greys')
plt.show()
gr_root_component
plt.imshow(image_from_char(gr_root_component[72]), cmap='Greys')
plt.show()
plt.cla()
gr_root_component = class_map_df[(class_map_df['component_type'] == 'grapheme_root') & \
(class_map_df['label'] == 72)]['component']
plt.imshow(image_from_char(gr_root_component[72]), cmap='Greys')
plt.show()
ax = plt.imshow(image_from_char(gr_root_component[72]), cmap='Greys')
ax.show()
fig.show
fig.show()
plt.clf()
gr_root_component = class_map_df[(class_map_df['component_type'] == 'grapheme_root') & \
(class_map_df['label'] == 72)]['component']
ax = plt.imshow(image_from_char(gr_root_component[72]), cmap='Greys')
fig.show()
plt.imshow(image_from_char(gr_root_component[72]), cmap='Greys')
plt.show()
# samples.reset_index(drop=True, inplace=True)
samples = train_df[train_df['grapheme_root'] == 72].sample(n=25)
f, ax = plt.subplots(5, 5, figsize=(16, 8))
ax = ax.flatten()
k = 0
for i, row in samples.iterrows():
ax[k].imshow(image_from_char(row['grapheme']), cmap='Greys')
k = k + 1
plt.show()
samples
samples.iterrows
samples.iterrows()
samples
samples[0]
samples['grapheme']
samples['grapheme'][1]
samples['grapheme'][1]
samples['grapheme']
samples['grapheme']
samples.iloc[0]
samples.iloc[0][1]
samples.iloc[0][1][1]
samples.iloc[0][1:2]
samples.iloc[0][1:4]
samples.iloc[0][1:7]
samples.iloc[0][1:0]
samples.iloc[0][1:99]
samples.iloc[0]
samples.iloc[0:3]
samples.iloc[0:3]['grapheme']
samples.iloc[0]['grapheme']
samples
samples[1:10]
samples[0:10]
samples[0:10]['grapheme']
samples[0]['grapheme']
samples[0:1]['grapheme']
samples[1]['grapheme']
samples[0:1]['grapheme']
samples[0:3]['grapheme']
samples[3:4]['grapheme']
f, ax = plt.subplots(5, 5, figsize=(16, 8))
ax = ax.flatten()
k = 0
for i, row in samples.iterrows():
ax[k].imshow(train_imgs[i], cmap='Greys')
k = k + 1
plt.show()
f, ax = plt.subplots(5, 5, figsize=(16, 8))
ax = ax.flatten()
k = 0
for i, row in samples.iterrows():
ax[k].imshow(train_imgs[i], cmap='Greys')
k = k + 1
plt.show()
i
samples
samples.iterrow()
samples.iterrows()
g = samples.iterrows()
for i, row in g:
if i % 10 == 0:
print(i)
for i, row in g: print(u)
for i, row in g: print(
from inst.python.data_tools import *
train_ids, train_imgs = load_as_npa(TRAIN[0])
from inst.python.get_csv_data import *
train_df.head()
test_df.head()
class_map_df.head()
sample_submission_df.head()
print("Number of unique grapheme_root: {}".format(train_df['grapheme_root'].nunique()))
f, ax = plt.subplots(5, 5, figsize=(16, 8))
ax = ax.flatten()
k = 0
for i, row in samples.iterrows():
ax[k].imshow(train_imgs[i], cmap='Greys')
k = k + 1
plt.show()
g = samples.iterrows()
g
for i, r in g:
print(i)
samples
samples['image_id']
samples['image_id'] <= 'Train_50000'
samples[samples['image_id'] <= 'Train_50000']
samples[samples['image_id'] < 'Train_50000']
samples.index
samples.index <= 50000
samples[samples.index <= 50000]
f, ax = plt.subplots(5, 5, figsize=(16, 8))
ax = ax.flatten()
k = 0
for i, row in samples[samples.index <= 50000]:# samples.iterrows():
ax[k].imshow(train_imgs[i], cmap='Greys')
k = k + 1
plt.show()
samples[samples.index <= 50000]
samples_short = samples[samples.index <= 50000]
for i, row in samples_short.iterrows():
ax[k].imshow(train_imgs[i], cmap='Greys')
k = k + 1
plt.show()
f, ax = plt.subplots(2, 5, figsize=(16, 8))
ax = ax.flatten()
k = 0
samples_short = samples[samples.index <= 50000]
for i, row in samples_short.iterrows():
ax[k].imshow(train_imgs[i], cmap='Greys')
k = k + 1
plt.show()
train_df[train_df['grapheme_root'] == 72].sample(n=25)
train_df[train_df['grapheme_root'] == 72 & train_df.index <= 50000].sample(n=25)
train_df[train_df['grapheme_root'] == 72 && train_df.index <= 50000].sample(n=25)
train_df[train_df['grapheme_root'] == 72 & train_df.index <= 50000].sample(n=25)
train_df['grapheme_root'] == 72 & train_df.index <= 50000
train_df.index <= 50000
train_df[train_df.index <= 50000]
train_df
train_df[train_df.index <= 50000]
train_df_short = train_df[train_df.index <= 50000]
samples = train_df_short[train_df['grapheme_root'] == 72].sample(n=25)
# samples.reset_index(drop=True, inplace=True)
f, ax = plt.subplots(5, 5, figsize=(16, 8))
ax = ax.flatten()
k = 0
for i, row in samples.iterrows():
ax[k].imshow(image_from_char(row['grapheme']), cmap='Greys')
k = k + 1
plt.show()
samples = train_df[
(train_df['grapheme_root'] == 72) &
(train_df['vowel_diacritic'] == 0) &
(train_df['consonant_diacritic'] == 0)
].sample(n=25)
f, ax = plt.subplots(5, 5, figsize=(16, 8))
ax = ax.flatten()
k = 0
for i, row in samples.iterrows():
ax[k].imshow(images0[i], cmap='Greys')
k = k + 1
plt.show()
for i, row in samples.iterrows():
ax[k].imshow(train_imgs[i], cmap='Greys')
k = k + 1
plt.show()
samples = train_df_short[
(train_df_short['grapheme_root'] == 72) &
(train_df_short['vowel_diacritic'] == 0) &
(train_df_short['consonant_diacritic'] == 0)
].sample(n=25)
f, ax = plt.subplots(5, 5, figsize=(16, 8))
ax = ax.flatten()
k = 0
for i, row in samples.iterrows():
ax[k].imshow(train_imgs[i], cmap='Greys')
k = k + 1
plt.show()
from inst.python.data_tools import *
reticulate::repl_python()
reticulate::repl_python()
