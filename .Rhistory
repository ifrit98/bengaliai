import pandas as pd
TRAIN = ['data-raw/train_image_data_0.parquet',
'data-raw/train_image_data_1.parquet',
'data-raw/train_image_data_2.parquet',
'data-raw/train_image_data_3.parquet']
TEST = ['data-raw/test_image_data_0.parquet',
'data-raw/test_image_data_1.parquet',
'data-raw/test_image_data_2.parquet',
'data-raw/test_image_data_3.parquet']
train_df_ = pd.read_csv('data-raw/train.csv')
test_df_ = pd.read_csv('data-raw/test.csv')
class_map_df = pd.read_csv('data-raw/class_map.csv')
sample_sub_df = pd.read_csv('data-raw/sample_submission.csv')
def load_all_and_merge_df():
# test0 = pd.read_parquet(TEST[0])
# test1 = pd.read_parquet(TEST[1])
# test2 = pd.read_parquet(TEST[2])
# test3 = pd.read_parquet(TEST[3])
test_df = pd.DataFrame()
for i in range(len(TEST)):
test_df = pd.merge(
pd.read_parquet(TEST[i]),
test_df_, on='image_id'
).drop(['image_id'], axis=1)
return test_df
df = load_all_and_merge_df()
df
df.head()
df.head
df
def load_all_and_merge_df():
# test0 = pd.read_parquet(TEST[0])
# test1 = pd.read_parquet(TEST[1])
# test2 = pd.read_parquet(TEST[2])
# test3 = pd.read_parquet(TEST[3])
test_df = pd.DataFrame()
for i in range(len(TEST)):
print(i)
test_df = pd.merge(
pd.read_parquet(TEST[i]),
test_df_, on='image_id'
).drop(['image_id'], axis=1)
print(test_df)
return test_df
df = load_all_and_merge_df()
import pandas as pd
reticulate::repl_python()
r0 <- np$load("data-npz/train_root_labels0.npz")
r0 <- r0$f[['train_root_labels']]
v0 <- np$load("data-npz/train_vowel_labels0.npz")
v0 <- v0$f[['train_vowel_labels']]
c0 <- np$load("data-npz/train_consonant_labels0.npz")
c0 <- c0$f[['train_consonant_labels']]
t0 <- np$load("data-npz/train_images0.npz")
df <- t0$f[['train_images']]
train <- as_tensor(df)
rt <- as_tensor(r0)
vt <- as_tensor(v0)
ct <- as_tensor(c0)
tup <- tuple(train, tuple(r0, c0, v0))
labels <- list(r0, c0, v0)
tlabels <- list(rt, ct, vt)
train_df <- train$numpy()
img <- train[1,,,]
str(img)
reticulate::source_python('~/kaggle/bengali/python/serialize_img.py')
img
# TODO: Use raw data when importing from .pq and .csv for features, maybe from R dataframes
source_python("python/load_data.py")
## -- start here -- ##
m <- as.matrix(train_df)
dim(m) <- c(12, 3, 32334)
m
dim(M)
dim(m)
train_df %>% str
train_df
dim(train_df)
train
test_df
## -- start here -- ##
m <- as.matrix(test_df)
dim(m) <- c(12, 3, 32334)
dim(m)
m[1,1,]
m[1,1,1]
m[1,,1]
m[1,,]
m[1,,] %>% length
dim(m)
m[12,,,]
m[12,,]
m[13,,]
m[12,1,]
m[12,3,]
m[12,2,]
m[12,4,]
m[12,1,]
m[12,1,1]
m[12,1,12]
m[12,1,] %>% length
m[12,1,32334]
m[12,1,32333]
m[12,1,32332]
m[12,1,32332]
m[12,1,32333]
m[12,1,32334]
m[12,1,32335]
train_df %>% dim
# TODO: Use raw data when importing from .pq and .csv for features, maybe from R dataframes
source_python("python/load_data.py")
# TODO: Use raw data when importing from .pq and .csv for features, maybe from R dataframes
source_python("python/load_data.py")
train_df
dim(train_df)
# TODO: Use raw data when importing from .pq and .csv for features, maybe from R dataframes
source_python("python/load_data.py")
train_Df
dim(train_df)
# TODO: Use raw data when importing from .pq and .csv for features, maybe from R dataframes
source_python("python/load_data.py")
train_df
# TODO: Use raw data when importing from .pq and .csv for features, maybe from R dataframes
source_python("python/load_data.py")
train_df
dim(train_df)
train_df[1,,] -> img
dim(img)
img[,-1]
img[,32334]
img[,32335]
img[,32336]
img[,32337]
img[,32335]
img[,32333]
img[,32332]
dim(train)Df
dim(train_df)
train_df[1,,32332:32336]
train_df[1,,32332]
train_df[1,,,32332]
img[,32332:32336]
img[,32333:32336]
labs <- img[,32333:32336]
labs
img  <- train_df[1,,]
labs <- img[,32333:32336]
labs
as.list(labs)
labs <- img[,32333:32336] %>% as.list()
laba
labs
length(img)
(length(img)-3L):length(img)-1L
(length(img)-2L):length(img)-1L
img[1,,(length(img)-2L):length(img)-1L]
img[1,(length(img)-2L):length(img)-1L]
labs
labs <- img[1,(length(img)-2L):length(img)-1L] %>% as.list()
labs
typeof(labs)
typeof(labs[[1]])
labs %>% as.integer()
img[1,(length(img)-2L):length(img)-1L] %>% as.intger()
img[1,(length(img)-2L):length(img)-1L]
img[1,(length(img)-2L):length(img)-1L] %>% unname
img[1,(length(img)-2L):length(img)-1L] %>% list
img[1,(length(img)-2L):length(img)-1L] %>% as.list()
img[1,(length(img)-2L):length(img)-1L] %>% as.list() %>% unname
img[1,(length(img)-2L):length(img)-1L] %>% as.list() %>% unname %>% as.integer
img[1,(length(img)-2L):length(img)-1L] %>% as.list() %>% as.integer()
img  <- train_df[1,,]
labs <- img[1,(length(img)-2L):length(img)-1L] %>% as.list() %>% as.integer()
labs
serialize_image(img, labs)
# SUCCESS!
source_python("python/serialize_img.py")
f
serialize_image
# SUCCESS!
source_python("python/serialize_img.py")
f
# SUCCESS!
source_python("python/serialize_img.py")
serialize_image
serialize_image(img, labs)
img
fj
str(img)
dim(img)
dim(img) <- c(1, 137, 236)
dim(img) <- c(137, 236)
dim(img) <- c(1, 137, 236)
img <- img[,(length(img)-2L):length(img)-1L]
img
img <- img[,(length(img)-2L):length(img)]
img
img <- img[,(length(img)-3L):length(img)]
img
img  <- train_df[1,,]
img[,(length(img)-3L):length(img)]
img[,(length(img)-2L):length(img)]
img[,(length(img)-3L):length(img)]
labs
img  <- train_df[1,,]
labs <- img[1,(length(img)-2L):length(img)-1L] %>% as.list() %>% as.integer()
labs
img
dim(img)
img[,(length(img)-3L):length(img)]
img[,(length(img)-4L):length(img)]
img[,(length(img)-3L):length(img)] <- NULL
img[,(length(img)-4L):length(img)]
length(img)
dim_img
dim(img)
labs
serialize_image(img, labs)
dim(img) <- c(1, 136, 236)
dim(img) <- c(1, 137, 236)
dim(img)
img
img[1,,]
img[1,]
img[,1,]
img[,1]
img[1,1]
img[1:11,1]
img[1,1:11]
img[2,1:11]
img[3,1:11]
img[1,1:11]
dim(img)
dim2
ncol2(img) <- c(1, 137, 236)
dim(img)
serialize_image(img, labs)
labs
img
labs
serialize_image(img, labs)
as_tensor(img)
img
dim(img) <- c(1, 32332)
dim(img)
img
as_tensor(img)
# TODO: Use raw data when importing from .pq and .csv for features, maybe from R dataframes
source_python("python/load_data.py")
img  <- train_df[1,,]
labs <- img[1,(length(img)-2L):length(img)-1L] %>% as.list() %>% as.integer() # get labels
img[,(length(img)-3L):length(img)] <- NULL # Remove labels from img array
dim(img) <- c(1, 137, 236)
dim(img)
dim(labs)
labs
as.list(labs)
img[1,,]
img[2,,]
img  <- train_df[1,,]
str(img)
img[1,,]
as.matrix(img) -> m
dim(m)
m
dim(m) <- c(1, 137, 236)
img  <- train_df[1,,]
labs <- img[1,(length(img)-2L):length(img)-1L] %>% as.list() %>% as.integer() # get labels
img[,(length(img)-3L):length(img)] <- NULL # Remove labels from img array
m <- as.matrix(img)
dim(m) <- c(1, 137, 236)
dim(M)
dim(m)
# SUCCESS!
source_python("python/serialize_img.py")
serialize_image(img, labs)
as_tensor(img)
import
import("numpy") -> np
np
np$asarray(img)
np$asarray(img) => a
np$asarray(img) => a
np$asarray(img) -> a
a$shape
np$shape(a)
np$reshape(a, list(1L, 137L, 236L))
a2 <- np$reshape(a, list(1L, 137L, 236L))
a1 <- np$reshape(a, list(1L, 137L, 236L))
a1$shape
a1[[1]]
dim(a1)
r_to_py(img)
x <- r_to_py(img)
x
x$values
x$values %>% np$reshape(list(1L, 137L, 236L))
x <- r_to_py(img)
x <- x$values %>% np$reshape(list(1L, 137L, 236L))
dim(x)
x <- r_to_py(img)
x <- x$values %>% np$reshape(list(137L, 236L))
dim(X)
dim(x)
reticulate::repl_python()
reticulate::repl_python()
