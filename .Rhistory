test  <- read_csv("data-raw/test.csv")
map   <- read_csv("data-raw/class_map.csv")
sub   <- read_csv("data-raw/sample_submission.csv")
# Loads 1st train image .parquet file as pandas data
reticulate::source_python("data-raw/import_pq.py")
dfy
# df <- arrow::read_parquet("data-raw/test_image_data_0.parquet")
df <- dfy %>% drop_col(image_id)
# df <- arrow::read_parquet("data-raw/test_image_data_0.parquet")
df <- dfy %>% JSGutils::drop_col(image_id)
df
df %>% dplyr::as_tibble
df %>% dplyr::as_tibble()
dim(df)
JSGutils:::slice_one_sig
df
ex <- dim(df)[1]
ex
dim(df) <- c(ex, 137, 236)
slice <- function(x, window_len = 137) {
x <- as.vector(x)
ncol2(x, pad = NULL) <- window_len
# Drop remainder if LT window size
if (length(x[dim(x)[1],]) < window_len)
x <- x[-dim(x)[1],]
lapply(seq_len(nrow(x)), function(i) x[i,])
}
slice(df[1,])
JSGutils:::`ncol2<-`
`ncol2<-`
?`ncol2<-`
??`ncol2<-`
ncol
nrow
`nrow<-`
??`nrow<-`
??`nrow<-`
dim(x)
dim(df)
ncol
dim2
??dim2
listarrays:::`dim2<-`
listarrays:::`dim<-`
base::`dim<-`
listarrays:::drop_dim2
library(listarrays)
dim2(df)
??dim2
listarrays:::`dim2<-`
x <- df[1,]
dim(x)
dim(x) <- c(1, 137, 236)
x
str(dx)
str(x)
dim(x) <- c(137, 236)
str(x)
dim2
listarrays::`dim2<-`
ncol
`ncol2<-` <- function(x, pad, value) {
browser()
ogdims <- dim(x)
}
ncol2(x) <- 137
pad
value
ncol2(x, pad = NULL) <- 137
pad
value
x
dim(x)
ogdims <- dim(x)
ogdims
dim(x) <- c(1, 137, 236)
x
str(x)
dim(x) <- c(1, 137)
length(x)
length(x) %% 137
length(x) %/% 137
length(x) // 137
length(x) %/% 137
length(x) %//% 137
ncol(x)
`ncol2<-` <- function(x, pad, value) {
browser()
new_col <- ncol(x) %/% value
dim(x) <- c(value, new_col)
x
}
`ncol2<-` <- function(x, pad, value) {
`ncol2<-` <- function(x, pad, value) {
# browser()
new_col <- ncol(x) %/% value
dim(x) <- c(value, new_col)
x
}
x
dim(x)
ncol2(x) <- 137
x
dim(x)
str(x)
`dim2<-`(x, 137)
`dim2<-`(x, c(137, 236))
x
dim(x)
dim2(x) <- c(137,236)
dim(x)
df2 <-
purrr::map_df(df, function(x) { listarrays::dim2(x) <- c(137, 236); x })
df2 <-
purrr::map(df, function(x) { listarrays::dim2(x) <- c(137, 236); x })
map_df
purrr::map_df
df2 <-
lapply(df, function(x) { listarrays::dim2(x) <- c(137, 236); x })
df2 <-
purrr::map_df(df, function(x) { browser(); listarrays::dim2(x) <- c(137, 236); x })
x
df2 <-
purrr::map_dfc(df, function(x) { browser(); listarrays::dim2(x) <- c(137, 236); x })
x
x
df2 <-
purrr::map_dfc(df, function(x) { browser(); listarrays::dim2(x) <- c(137, 236); x })
x
df
dim(df)
attributes(df)
as.vector(df[1,])
v <- as.vector(df[1,])
dim(v)
typeof(df[1,])
typeof(v)
mode(v)
mode(df[1,])
str(v)
str(df[1,])
listarrays::dim2(df[1,]) <- c(137,236)
df2 <-
purrr::map(1:length(df), ~listarrays::dim2(df[.,]) <- c(137, 236))
df2 <-
purrr::map(1:length(df), function(i) listarrays::dim2(df[i,]) <- c(137, 236))
library(magrittr)
library(zeallot)
library(readr)
train <- read_csv("data-raw/train.csv")
test  <- read_csv("data-raw/test.csv")
map   <- read_csv("data-raw/class_map.csv")
sub   <- read_csv("data-raw/sample_submission.csv")
# Loads 1st train image .parquet file as pandas data
reticulate::source_python("data-raw/import_pq.py")
# df <- arrow::read_parquet("data-raw/test_image_data_0.parquet")
df <- dfy %>% JSGutils::drop_col(image_id)
df
str(Df)
str(df)
df2 <-
purrr::map(1:length(df), function(i) listarrays::dim2(df[i,]) <- c(137, 236))
df
df2
str(df)
typeof(df)
mode(df)
class(df)
library(purrr)
purrr::map_dfr
purrr::map_dfr(df, function(x) listarrays::dim2(x) <- c(137, 236))
purrr::map_dfr(df, function(x) browser(); listarrays::dim2(x) <- c(137, 236))
purrr::map_dfr(df, function(x) {browser(); listarrays::dim2(x) <- c(137, 236)})
x
purrr::map_dfc(df, function(x) {browser(); listarrays::dim2(x) <- c(137, 236)})
x
purrr::map_dfr(df, function(x) {browser(); listarrays::dim2(x) <- c(137, 236)})
x
purrr::map_df(df, function(x) {browser(); listarrays::dim2(x) <- c(137, 236)})
x
t(df)
df
purrr::map_dfr(t(df), function(x) {browser(); listarrays::dim2(x) <- c(137, 236)})
x
t(df) -> tdf
tdf
tdf[[1]]
tdf[1]
tdf[1,]
tdf[,1]
tdf[,2]
tdf[,3]
tdf[,4]
tdf[,3]
df
df[1,]
df[1,] %>% str
length(df[1,])
length(df[,1])
df2 <-
purrr::map(1:length(df[,1]), function(i) listarrays::dim2(df[i,]) <- c(137, 236))
df2
df2 <-
purrr::map(1:length(df[,1]), function(i) { browser(); listarrays::dim2(df[i,]) <- c(137, 236); x })
x
i
df[i,]
Q
Q
Q
Q
Q
length(df[,1])
df2 <-
purrr::map(1:length(df[,1]), function(i) { browser(); listarrays::dim2(df[,i]) <- c(137, 236); df[,i] })
i
df[,i]
df[i,]
df[2,]
df[2,1]
df[2,2]
length(df[,1])
df[1,]
df[1,] %>% length
df[2,] %>% length
df[3,] %>% length
df[,1] %>% length
df[,2] %>% length
str(df)
t(df)
tdf
str(tsd)
str(tdf)
tdf[1,]
tdf[1,]
tdf[,1]
tdf[,1] %>% unlist
tdf[,1] %>% unname
str(df)
library(JSGutils)
drop_colnames(df)
d <- drop_colnames(df)
d[1,]
d[1,] %>% str
df2 <-
purrr::map(1:length(df[,1]), function(i) { browser(); listarrays::dim2(df[,i]) <- c(137, 236); df[,i] })
df[,i]
df[i,]
df[i,] %>% unname
df2 <- unname(df)
df2
str(df2)
str(df)
df3 <-
purrr::map(1:length(df[,1]), function(i) { browser(); listarrays::dim2(df2[i,]) <- c(137, 236); df[i,] })
df2[i,]
df2[i,] %>% str
df2[i,] %>% str
df2[i,] %>% dim
listarrays::dim2(df2[i,]) <- c(137, 236)
df2[i,] %>% dim
df2[i,] %>% dim2
dim(df2[i,]) <- c(137, 236)
df2[i,]
df2[i,] %>% str
str(tdf)
tdf[1,]
tdf[1,1]
tdf[1]
tdf[,1]
df3 <-
purrr::map(1:length(df[,1]), function(i) { browser(); listarrays::dim2(tdf[i,]) <- c(137, 236); tdf[i,] })
tdf[,1] i
i
tdf[i,]
df3 <-
purrr::map(1:length(df[,1]), function(i) { browser(); listarrays::dim2(tdf[,i]) <- c(137, 236); tdf[,i] })
tdf[i,]
tdf[,i]
tdf[,i] %>% dim
dim(tdf[,i]) <- c(137,236)
tdf[,i] %>% str
dim2(tdf[,i]) <- c(137,236)
listarrays::dim2(tdf[,i]) <- c(137,236)
tdf[,i] %>% str
x <- listarrays::dim2(tdf[,i]) <- c(137,236)
x
x <- dim(tdf[,i]) <- c(137,236)
x
x <- tdf[,i]
listarrays::dim2(x) <- c(137,236)
x
df3 <-
purrr::map(1:length(df[,1]), function(i) { browser(); x <- tdf[,i] listarrays::dim2(x) <- c(137, 236); x })
df3 <-
purrr::map(1:length(df[,1]), function(i) { browser(); x <- tdf[,i]; listarrays::dim2(x) <- c(137, 236); x })
x
x
x
x
df3 <-
purrr::map(1:length(df[,1]), function(i) { x <- tdf[,i]; listarrays::dim2(x) <- c(137, 236); x })
df2
str(df3)
df3 <-
purrr::map(1:length(df[,1]), function(i) { x <- tdf[,i]; listarrays::dim2(x) <- c(137, 236, 1); x })
str(df3)\
str(df3)
dim(df3[[1]])
dim(df3[1])
df3[1]
df3[[1]]
library(magrittr)
library(zeallot)
library(readr)
train <- read_csv("data-raw/train.csv")
test  <- read_csv("data-raw/test.csv")
map   <- read_csv("data-raw/class_map.csv")
sub   <- read_csv("data-raw/sample_submission.csv")
library(magrittr)
library(zeallot)
library(readr)
train <- read_csv("data-raw/train.csv")
test  <- read_csv("data-raw/test.csv")
map   <- read_csv("data-raw/class_map.csv")
sub   <- read_csv("data-raw/sample_submission.csv")
# Loads 1st train image .parquet file as pandas data
reticulate::source_python("data-raw/import_pq.py")
df_train <- tf_train0 %>% JSGutils::drop_col(image_id)
df_test  <- df_test0 %>% JSGutils::drop_col(image_id)
df_train <- df_train0 %>% JSGutils::drop_col(image_id)
df_train %>% str
train_df2 <- t(df_train)
test_df2 <- t(df_test)
train_df[i,] %>% str
df_train[i,] %>% str
df_train[1,] %>% str
df_train[1,1] %>% str
df_train[,1] %>% str
df3 <-
purrr::map(1:length(df_test[, 1]),
function(i) {
x <- df_test[, i]
listarrays::dim2(x) <- c(137, 236, 1)
x
})
length(df_test[,1])
str(df_test[,1])
str(df_test[1,])
str(df_test[,1])
str(df_test[1,])
df3 <-
purrr::map(1:length(df_test[, 1]),
function(i) {
x <- df_test[i, ]
listarrays::dim2(x) <- c(137, 236, 1)
x
})
df3
rm(train_df2)
rm(test_df2)
memory.limit()
memory.size()
memory.profile()
unflatten_images <- function(df, dims = c(137, 236, 1)) {
purrr::map(1:length(df[, 1]),
function(i) {
x <- df[i, ]
listarrays::dim2(x) <- dims
x
})
}
unflatten_images(df_test)
d <- unflatten_images(df_test)
str(d)
d <- unflatten_images(df_train)
parallel::mcMap
d
str(d)
grapheme_labels <- 0:167
vowel_diacritic <- 0:10
cons_diacritic  <- 0:6
class_map <- readr::read_csv("data-raw/class_map.csv", skip = 1L)
train_labels <- readr::read_csv("data-raw/train.csv")
test_labels  <- readr::read_csv("data-raw/test.csv")
test_labels
train_labels
train_labels[111]
train_labels[111,]
train_labels[,111]
train_labels[,1]
train_labels[,2]
train_labels[,3]
train_labels[,4]
train_labels[,5]
train_labels
submission <- readr::read_csv("data-raw/sample_submission.csv")
submission
JSGutils::`ncol2<-`
grapheme_labels <- 0:167
vowel_diacritic_labels <- 0:10
consonant_diacritic_labels <- 0:6
class_map <- readr::read_csv("data-raw/class_map.csv", skip = 1L)
train_labels <- readr::read_csv("data-raw/train.csv")
test_labels  <- readr::read_csv("data-raw/test.csv")
submission <- readr::read_csv("data-raw/sample_submission.csv")
train_labels
test_labels
submission
submission %>% print(n = Inf)
df_test0
df_test0 %>% str
library(JSGutils)
as_tensor
t <- as_tensor(df_test0)
tensors <- lapply(df_test0, as_tensor)
df_test0[,1]
df_test0[1.]
df_test0[1,]
df_test0[1,] %>% unlist
df_test0[1,] %>% unlist %>% unname
df_test0[1,] %>% unlist %>% unname -> t
str(t)
df_test0[1,][-1] %>% unlist %>% unname -> t
t
str(t)
t <- df_test0[1,][-1] %>% unlist %>% unname
df_test0[1,][-1] %>% length
df_test0[,1][-1] %>% length
df_test0[,1] %>% length
lapply(1:length(df_test0[, 1]), ~.[..1, ][-1] %>% unlist %>% unname)
lapply(1:length(df_test0[, 1]), unname(unlist(~.[..1, ][-1])))
lapply(1:length(df_test0[, 1]), {unname(unlist(~.[..1, ][-1]))})
lapply( 1:length( df_test0[, 1] ), { unname( unlist( df_test0[..1, ][-1] ) ) } )
lapply( 1:length( df_test0[, 1] ), function(i) { unname( unlist( df_test0[i, ][-1] ) ) } )
images <-
lapply( 1:length( df_test0[, 1] ), function(i) { unname( unlist( df_test0[i, ][-1] ) ) } )
str(images)
images[1,]
images[1]
images[1] %>% as_tensor
images[1] %>% as_tensor(dtype = tf$float32)
library(tensorflow)
source('~/kaggle/bengali/dataset.R')
library(tensorflow)
library(JSGutils)
library(reticulate)
source_python("data-raw/import_pq.py")
# df_train0 %<>% JSGutils::drop_col(image_id)
df_test0  %<>% drop_col(image_id)
images <-
lapply(1:length(df_test0[, 1]),
function(i) {
unname(unlist(df_test0[i,][-1])) %>% as_tensor(dtype = tf$float32)
})
library(magrittr)
images <-
lapply(1:length(df_test0[, 1]),
function(i) {
unname(unlist(df_test0[i,][-1])) %>% as_tensor(dtype = tf$float32)
})
images
image_tensors_2d <- lapply(image_tensors, ~tf$reshape(., shape = list(137L, 236L)))
image_tensors_2d <- lapply(image_tensors, ~tf$reshape(..1, shape = list(137L, 236L)))
~x+y
image_tensors_2d <- lapply(image_tensors, function(x) tf$reshape(x, shape = list(137L, 236L)))
image_tensors <-
lapply(1:length(df_test0[, 1]),
function(i) {
unname(unlist(df_test0[i,][-1])) %>% as_tensor(dtype = tf$float32)
})
image_tensors_2d <- lapply(image_tensors, function(x) tf$reshape(x, shape = list(137L, 236L)))
image_tensors_2d
image_tensors_2d <- lapply(image_tensors, function(x) tf$reshape(x, shape = list(137L, 236L, 1L)))
image_tensors_2d
image_tensors_2d <-
lapply(image_tensors, function(x) tf$reshape(x, shape = list(137L, 236L)))
image_tensors_2d
library(magrittr)
library(zeallot)
library(readr)
train <- read_csv("data-raw/train.csv")
test  <- read_csv("data-raw/test.csv")
map   <- read_csv("data-raw/class_map.csv")
sub   <- read_csv("data-raw/sample_submission.csv")
# Loads 1st train image .parquet file as pandas data
reticulate::source_python("data-raw/import_pq.py")
df_test9
df_test0
df_test0 %>% dim
df_test0 %>% typeof
df_test[,1]
df_test0[,1]
df_test0[,1,]
df_test0[,]
df_test0[]
df_test0[1]
df_test0[2]
df_test0[3]
df_test0[2]
df_test0[4]
df_test0[1]
df_test0[2]
df_test0[2] %>% do,
df_test0[2] %>% dim
# Loads 1st train image .parquet file as pandas data
reticulate::source_python("data-raw/import_pq.py")
images0
images0[1]
images0[1,]
length(images0)
reticulate::repl_python()
