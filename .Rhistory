import pandas as pd
import tensorflow as tf
HEIGHT = 137
WIDTH  = 236
BATCH  = 128
# Load data
train_md = pd.read_csv('data-raw/train.csv')
test_md = pd.read_csv('data-raw/test.csv')
class_map_df = pd.read_csv('data-raw/class_map.csv')
sample_sub_df = pd.read_csv('data-raw/sample_submission.csv')
# test1 = pd.read_parquet(TEST[1])
# test1 = test1.drop(columns=['image_id'])
# df = test1
train0 = pd.read_parquet(TRAIN[0]).drop(columns=['image_id'])
EAGER = "<class 'tensorflow.python.framework.ops.EagerTensor'>"
def _bytes_feature(value):
"""Returns a bytes_list from a string / byte."""
if isinstance(value, type(tf.constant(0))) and str(type(value)) == EAGER:
value = value.numpy() # BytesList won't unpack a string from an EagerTensor.
return tf.train.Feature(bytes_list=tf.train.BytesList(value=[value]))
def _float_feature(value):
"""Returns a float_list from a float / double."""
return tf.train.Feature(float_list=tf.train.FloatList(value=[value]))
def _int64_feature(value):
"""Returns an int64_list from a bool / enum / int / uint."""
return tf.train.Feature(int64_list=tf.train.Int64List(value=[value]))
def serialize_example(image, labels):
image_string = tf.io.serialize_tensor(image)
feature = {
'height':          _int64_feature(HEIGHT), # 137
'width':           _int64_feature(WIDTH),  # 236
'depth':           _int64_feature(1),      # 1
'label_grapheme':  _int64_feature(labels[0]),
'label_vowel':     _int64_feature(labels[1]),
'label_consonant': _int64_feature(labels[2]),
'image_raw':       _bytes_feature(image_string),
}
proto = tf.train.Example(features=tf.train.Features(feature=feature))
return proto.SerializeToString()
def tf_serialize_image(image_string, labels):
tf_string = tf.py_function(
serialize_image,
(image_string, labels),
tf.string)
return tf.reshape(tf_string, ())
filename = 'test.tfrecord'
with tf.io.TFRecordWriter(filename) as writer:
for i in range(100):
img = train0.iloc[i].values.reshape([HEIGHT, WIDTH, 1])
labs = train_md.iloc[0].values[1:-1] # root, vowel, consonant
serialized_ex = serialize_example(img, labs)
writer.write(serialized_ex)
reticulate::repl_python()
reticulate::repl_python()
qs::qread("history.qs") -> x
x
x
x$
x()
reticulate::repl_python()
ds <- ds_parsed %>%
dataset_map(function(x) {
x$image_raw$set_shape(list(HEIGHT, WIDTH, 1L))
tuple(x$image_raw,
tuple(x$label_grapheme, x$label_consonant, x$label_vowel))
}) %>%
dataset_shuffle(100L) %>%
dataset_batch(128L) %>%
dataset_prefetch(10L)
ds <- ds_parsed %>%
dataset_map(function(x) {
x$image_raw$set_shape(list(HEIGHT, WIDTH, 1L))
tuple(x$image_raw,
tuple(x$label_grapheme, x$label_consonant, x$label_vowel))
}) %>%
dataset_shuffle(100L) %>%
dataset_batch(128L) %>%
dataset_prefetch(10L)
ds_parsed
source_python("python/read_tfrecord_dataset.py")
ds <- ds_parsed %>%
dataset_map(function(x) {
x$image_raw$set_shape(list(HEIGHT, WIDTH, 1L))
tuple(x$image_raw,
tuple(x$label_grapheme, x$label_consonant, x$label_vowel))
}) %>%
dataset_shuffle(100L) %>%
dataset_batch(128L) %>%
dataset_prefetch(10L)
val_ds <- ds$take(100L)
ds
val_ds
val_ds
ds
val_ds
ds <- ds_parsed %>%
dataset_map(function(x) {
x$image_raw$set_shape(list(HEIGHT, WIDTH, 1L))
tuple(x$image_raw,
tuple(x$label_grapheme, x$label_consonant, x$label_vowel))
}) %>%
dataset_shuffle(100L) %>%
dataset_batch(32L) %>%
dataset_prefetch(10L)
val_ds <- ds$take(100L)
ds]\
ds
ds <- ds_parsed %>%
dataset_map(function(x) {
x$image_raw$set_shape(list(HEIGHT, WIDTH, 1L))
tuple(x$image_raw,
tuple(x$label_grapheme, x$label_consonant, x$label_vowel))
}) %>%
dataset_shuffle(100L) %>%
dataset_batch(32L)
ds
ds
next(ds)
next_batch(ds) -> x
x
x[1]
x[0]
x[1]
x[[1]]
x[[2]]
x[[3]]
x[[2]]
str(x)
merge_dfs
crop_resize
reticulate::repl_python()
source('~/kaggle/bengali/data-transformations.R')
scale
mean
reticulate::repl_python()
source("flags.R")
source("dataset.R")
source("models/base.R")
callbacks <- list(
callback_reduce_lr_on_plateau(monitor = "loss"),
callback_model_checkpoint("model-weights-best-checkpoint.h5", monitor = "loss")
# callback_tensorboard(file.path("logs", stringr::str_squish(lubridate::now())))
)
hist <- model %>%
fit(
ds,
validation_data = val_ds,
epochs = 10,
steps_per_epoch = 25,
callbacks = callbacks
)
model
getwd()
as.tensor
is_tensor
as_tensor
reticulate::repl_python()
py_config()
reticulate::repl_python()
