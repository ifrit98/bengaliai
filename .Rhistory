nbb[[2]]
nbb <- sess$run(nb)
nbb[[2]]
nbb <- sess$run(nb)
nbb[[2]]
nbb <- sess$run(nb)
nbb[[2]]
nbb <- sess$run(nb)
nbb[[2]]
nbb <- sess$run(nb)
nbb[[2]]
nbb <- sess$run(nb)
nbb[[2]]
nbb <- sess$run(nb)
nbb[[2]]
nbb <- sess$run(nb)
nbb[[2]]
dim(nbb[[1]])
source_python("python/tfrecords/load_tfrecords.py")
if (!exists_here("FLAGS")) {
import_from("flags.R", FLAGS)
}
(b <- next_batch(ds_raw))
sess <- tf$Session()
bb <- sess$run(b)
bb
bb$consonant
ds_Raw
ds_raw
ds
ds <- ds_raw %>%
dataset_map(function(x) {
x$image <- tf$reshape(x$image, list(137L, 236L, 1L))
tuple(x$image,
tuple(x$grapheme, x$consonant, x$vowel))
}) %>%
dataset_shuffle(10L) %>%
dataset_batch(FLAGS$batch_size) %>%
dataset_prefetch(2L)
ds
FLAGS$batch_size
val_ds <- ds$take(FLAGS$val_size)
val_)ds
val_ds
FLAGS
source('~/internal/bengali/dataset.R')
ds
source('~/internal/bengali/models/base.R')
if (!exists_here("FLAGS")) {
import_from("flags.R", FLAGS)
}
FLAGS
input <- layer_input(shape = list(FLAGS$height, FLAGS$width, 1L))
base <- input %>%
layer_conv_2d(16L, 3L, activation = 'relu') %>%
layer_conv_2d(32L, 5L, activation = 'relu') %>%
layer_batch_normalization() %>%
layer_conv_2d(48L, 8L, activation = 'relu') %>%
layer_conv_2d(64L, 10L, activation = 'relu') %>%
layer_batch_normalization() %>%
layer_global_max_pooling_2d()
root <- base %>%
layer_dense(192L) %>%
layer_dense(168L, activation = 'softmax')
cons <- base %>%
layer_dense(64L) %>%
layer_dense(7L, activation = 'softmax')
vowel <- base %>%
layer_dense(64L) %>%
layer_dense(11L, activation = 'softmax')
model <- keras_model(input, list(root, cons, vowel))
model %>% compile(
optimizer = 'adam',
loss = 'categorical_crossentropy',
metrics = 'acc'
)
cat("Finished sourcing model\n")
model
model$count_params
model$count_params()
cat("Finished sourcing model with %d params\n", model$count_params())
cat("Finished sourcing model with %s params\n", model$count_params())
cat
callbacks <- list()
model
hist <- model %>%
fit(
ds,
validation_data = val_ds,
epochs = 10,
steps_per_epoch = 25,
callbacks = callbacks
)
import_from("dataset.R", ds, val_ds)
val_ds
ds
hist <- model %>%
fit(
ds,
validation_data = val_ds,
epochs = 10,
steps_per_epoch = 25,
callbacks = callbacks
)
FLAGS <- tensorflow::flags(
flag_integer("height", 137),
flag_integer("width", 236),
flag_integer("batch_size", 8),
flag_integer("val_size", 10),
flag_string("source_dir", "data/data-tfrecord")
)
source("flags.R")
import_from("dataset.R", ds, val_ds)
# source("dataset-npz.R")
source("models/base.R")
import_from("models/base.R", model)
callbacks <- list()
hist <- model %>%
fit(
ds,
validation_data = val_ds,
epochs = 10,
steps_per_epoch = 25,
callbacks = callbacks
)
fit
val_ds
FLAGS
hist <- model %>%
fit(
ds,
validation_data = val_ds,
validation_steps = 10,
epochs = 10,
steps_per_epoch = 25,
callbacks = callbacks
)
hist <- model %>%
fit(
ds,
validation_data = val_ds,
validation_steps = 100,
epochs = 10,
steps_per_epoch = 25,
callbacks = callbacks
)
hist <- model %>%
fit(
ds,
validation_data = val_ds,
validation_steps = 100,
epochs = 10,
steps_per_epoch = 25,
callbacks = callbacks
)
hist <- model %>%
fit(
ds,
validation_data = val_ds,
validation_steps = 10,
epochs = 100,
steps_per_epoch = 25,
callbacks = callbacks
)
source('~/internal/bengali/dataset.R')
ds
val
val_ds
import_from("dataset.R", ds)
ds
ds$map(function(x) {
browser()
})
ds$map(function(x) {
browser()
})
ds
import_from("dataset.R", raw_ds)
raw_ds
ds_raw
import_from("dataset.R", ds <- ds_raw)
ds
ds_raw
ds %>% dataset_map(function(x) {
browser()
})
import_from("dataset.R", ds_raw)
ds_raw %>% dataset_map(function(x) {
browser()
})
x
x$image
install.packages("OpenImageR")
ds_raw %>% dataset_map(function(x) {
browser()
x$image <- image_augmentation(x$image)
})
image_augmentation <- function(image) {
browser()
filename <- "_image"
outfn.prefix=sub(".jpg$|.jpeg$|.png$|.tiff$", "", filename, ignore.case = TRUE)
horizontal_flipped_image=flipImage(image, mode = "horizontal")
writeImage(horizontal_flipped_image, paste(outfn.prefix, "_horizontal_flipped.jpg",sep=""))
vertical_flipped_image=flipImage(image, mode = "vertical")
writeImage(vertical_flipped_image, paste(outfn.prefix, "_vertical_flipped.jpg",sep=""))
# randomly rotation
rotated_image=rotateImage(image, angle = sample(1:359,1))
writeImage(rotated_image, paste(outfn.prefix, "_rotated.jpg",sep=""))
# image cropping, the cropping dimension can be changed.
cropped_image=cropImage(image, dim(image)[1]*0.62, dim(image)[2]*0.62)
writeImage(cropped_image, paste(outfn.prefix, "_cropped.jpg",sep=""))
# ZCA whitening
zcawhitening_image=ZCAwhiten(image, k = 100, epsilon = 0.1)
writeImage(zcawhitening_image, paste(outfn.prefix, "_zcawhitening.jpg",sep=""))
}
library(OpenImageR)
ds_raw %>% dataset_map(function(x) {
browser()
x$image <- image_augmentation(x$image)
})
image
sess <- tf$Session()
img <- image
image <- sess$run(img)
image <- sess$run(ds_raw)
ds_raw
nb <- next_batch(ds_raw)
nb
sess <- tf$Session()
b <- sess$run(nb)
import_from("dataset.R", ds_raw)
nb <- next_batch(ds_raw)
sess <- tf$Session()
b <- sess$run(nb)
b
img <- b$image
image_augmentation(img)
image_augmentation <- function(image) {
browser()
filename <- "_image"
outfn.prefix=sub(".jpg$|.jpeg$|.png$|.tiff$", "", filename, ignore.case = TRUE)
horizontal_flipped_image=flipImage(image, mode = "horizontal")
writeImage(horizontal_flipped_image, paste(outfn.prefix, "_horizontal_flipped.jpg",sep=""))
vertical_flipped_image=flipImage(image, mode = "vertical")
writeImage(vertical_flipped_image, paste(outfn.prefix, "_vertical_flipped.jpg",sep=""))
# randomly rotation
rotated_image=rotateImage(image, angle = sample(1:359,1))
writeImage(rotated_image, paste(outfn.prefix, "_rotated.jpg",sep=""))
# image cropping, the cropping dimension can be changed.
cropped_image=cropImage(image, dim(image)[1]*0.62, dim(image)[2]*0.62)
writeImage(cropped_image, paste(outfn.prefix, "_cropped.jpg",sep=""))
# ZCA whitening
zcawhitening_image=ZCAwhiten(image, k = 100, epsilon = 0.1)
writeImage(zcawhitening_image, paste(outfn.prefix, "_zcawhitening.jpg",sep=""))
}
library(OpenImageR)
image_augmentation <- function(image) {
browser()
filename <- "_image"
outfn.prefix=sub(".jpg$|.jpeg$|.png$|.tiff$", "", filename, ignore.case = TRUE)
horizontal_flipped_image=flipImage(image, mode = "horizontal")
writeImage(horizontal_flipped_image, paste(outfn.prefix, "_horizontal_flipped.jpg",sep=""))
vertical_flipped_image=flipImage(image, mode = "vertical")
writeImage(vertical_flipped_image, paste(outfn.prefix, "_vertical_flipped.jpg",sep=""))
# randomly rotation
rotated_image=rotateImage(image, angle = sample(1:359,1))
writeImage(rotated_image, paste(outfn.prefix, "_rotated.jpg",sep=""))
# image cropping, the cropping dimension can be changed.
cropped_image=cropImage(image, dim(image)[1]*0.62, dim(image)[2]*0.62)
writeImage(cropped_image, paste(outfn.prefix, "_cropped.jpg",sep=""))
# ZCA whitening
zcawhitening_image=ZCAwhiten(image, k = 100, epsilon = 0.1)
writeImage(zcawhitening_image, paste(outfn.prefix, "_zcawhitening.jpg",sep=""))
}
image_augmentation(img)
image
outfn.prefix
f1
fl
horizontal_flipped_image
writeImage(image, paste0(filename, ".jpg"))
horiz
image_augmentation(img)
image_augmentation <- function(image) {
browser()
filename <- "_image"
writeImage(image, paste0(filename, ".jpg"))
outfn.prefix=sub(".jpg$|.jpeg$|.png$|.tiff$", "", filename, ignore.case = TRUE)
horizontal_flipped_image=flipImage(image, mode = "horizontal")
writeImage(horizontal_flipped_image, paste(outfn.prefix, "_horizontal_flipped.jpg",sep=""))
vertical_flipped_image=flipImage(image, mode = "vertical")
writeImage(vertical_flipped_image, paste(outfn.prefix, "_vertical_flipped.jpg",sep=""))
# randomly rotation
rotated_image=rotateImage(image, angle = sample(1:359,1))
writeImage(rotated_image, paste(outfn.prefix, "_rotated.jpg",sep=""))
# image cropping, the cropping dimension can be changed.
cropped_image=cropImage(image, dim(image)[1]*0.62, dim(image)[2]*0.62)
writeImage(cropped_image, paste(outfn.prefix, "_cropped.jpg",sep=""))
# ZCA whitening
zcawhitening_image=ZCAwhiten(image, k = 100, epsilon = 0.1)
writeImage(zcawhitening_image, paste(outfn.prefix, "_zcawhitening.jpg",sep=""))
}
image_augmentation(img)
img
plot(image)
image
image[1,]
library("jpeg")
plot(0:1,0:1,type="n",ann=FALSE,axes=FALSE)
rasterImage(image,0,0,1,1)
image
img
rasterImage(img,0,0,1,1)
mean(img)
lapply(img, mean)
lapply(img[1,], mean)
mean(img)
std(img)
img - mean(img)
sd(img)
mean(img)
dataset_normalize_image <- function(x, v1=TRUE) {
browser()
img <- x$image
# Version 1
x$image <- (img - mean(img)) / sd(img)
# Version 2
x$image <- (255 - img) / 255
x
}
ds <- datset_map(ds_raw, dataset_normalize_image)
ds <- dataset_map(ds_raw, dataset_normalize_image)
x
x$image
dataset_normalize_image <- function(x, v1=TRUE) {
img <- x$image
browser()
# Version 1
x$image <- (img - mean(img)) / sd(img)
# Version 2
x$image <- (255 - img) / 255
x
}
ds <- dataset_map(ds_raw, dataset_normalize_image)
img
tf$mean
tf$math$reduce_mean(img)
tf$math$reduce_std(img)
img
dataset_normalize_image <- function(x, v1=TRUE) {
img <- tf$cast(x$image, tf$float32)
browser()
# Version 1
x$image <- (img - tf$math$reduce_mean(img)) / tf$math$reduce_std(img)
# Version 2
x$image <- (255 - img) / 255
x
}
ds <- dataset_map(ds_raw, dataset_normalize_image)
img
x$image
x$image
dataset_normalize_image <- function(x, v1=TRUE) {
img <- tf$cast(x$image, tf$float32)
browser()
# Version 1
x$image <- if (v1)
(img - tf$math$reduce_mean(img)) / tf$math$reduce_std(img)
else
# Version 2
x$image <- (255 - img) / 255
x
}
ds <- dataset_map(ds_raw, dataset_normalize_image)
x$image
dataset_normalize_image <- function(x, v1=TRUE) {
img <- tf$cast(x$image, tf$float32)
# browser()
# Version 1
x$image <- if (v1)
(img - tf$math$reduce_mean(img)) / tf$math$reduce_std(img)
else
# Version 2
x$image <- (255 - img) / 255
x
}
ds <- dataset_map(ds_raw, dataset_normalize_image)
DS
ds
nb <- next_batch(ds)
import_from("dataset.R", ds_raw)
dataset_normalize_image <- function(x, v1=TRUE) {
img <- tf$cast(x$image, tf$float32)
# Version 1
x$image <- if (v1)
(img - tf$math$reduce_mean(img)) / tf$math$reduce_std(img)
else
# Version 2
x$image <- (255 - img) / 255
x
}
ds <- dataset_map(ds_raw, dataset_normalize_image)
nb <- next_batch(ds)
sess <- tf$Session()
b <- sess$run(nb)
b
b$image %>% dim
nb
tf$nn$moments(img)
img
image
dataset_normalize_image <- function(ds, v1=TRUE) {
dataset_map(ds, function(x) {
img <- tf$cast(x$image, tf$float32)
# Version 1
x$image <- if (v1)
(img - tf$math$reduce_mean(img)) / tf$math$reduce_std(img)
else
# Version 2
x$image <- (255 - img) / 255
x
})
}
ds <- ds %>% dataset_normalize_image()
nb <- next_batch(ds)
sess <- tf$Session()
b <- sess$run(nb)
b$image[1]
b$image[2]
b$image[54]
plot(0:1,0:1,type="n",ann=FALSE,axes=FALSE)
library("jpeg")
plot(0:1,0:1,type="n",ann=FALSE,axes=FALSE)
rasterImage(img,0,0,1,1)
rasterImage(b$image,0,0,1,1)
dataset_normalize_image <- function(ds, v1=TRUE) {
dataset_map(ds, function(x) {
img <- tf$cast(x$image, tf$float32)
# Version 1
x$image <- if (v1)
(img - tf$math$reduce_mean(img)) / tf$math$reduce_std(img) %>% tf$abs()
else
# Version 2
x$image <- (255 - img) / 255
x
})
}
ds <- ds %>% dataset_normalize_image()
nb <- next_batch(ds)
sess <- tf$Session()
b <- sess$run(nb)
library("jpeg")
# jj <- readJPEG("myfile.jpg",native=TRUE)
plot(0:1,0:1,type="n",ann=FALSE,axes=FALSE)
rasterImage(b$image,0,0,1,1)
dataset_normalize_image <- function(ds, v1=TRUE) {
dataset_map(ds, function(x) {
img <- tf$cast(x$image, tf$float32)
# Version 1
img <- if (v1)
(img - tf$math$reduce_mean(img)) / tf$math$reduce_std(img)
else
# Version 2
x$image <- (255 - img) / 255
x$image <- tf$math$abs(img)
x
})
}
import_from("dataset.R", ds_raw)
dataset_normalize_image <- function(ds, v1=TRUE) {
dataset_map(ds, function(x) {
img <- tf$cast(x$image, tf$float32)
# Version 1
img <- if (v1)
(img - tf$math$reduce_mean(img)) / tf$math$reduce_std(img)
else
# Version 2
x$image <- (255 - img) / 255
x$image <- tf$math$abs(img)
x
})
}
ds <- ds_raw %>% dataset_normalize_image()
nb <- next_batch(ds)
sess <- tf$Session()
b <- sess$run(nb)
library("jpeg")
# jj <- readJPEG("myfile.jpg",native=TRUE)
plot(0:1,0:1,type="n",ann=FALSE,axes=FALSE)
rasterImage(b$image,0,0,1,1)
tf$norm
dataset_normalize_image_v2 <- function(ds) {
dataset_map(ds, function(x) {
img <- tf$cast(x$image, tf$float32)
x$image <-
(img - tf$reduce_min(img)) / (tf$reduce_max(img) - tf$reduce_min(img))
x
})
}
ds <- ds_raw %>% dataset_normalize_image_v2()
nb <- next_batch(ds)
sess <- tf$Session()
b <- sess$run(nb)
ds_raw %>% dataset_map(function(x) {
browser()
x$image <- image_augmentation(x$image)
})
library("jpeg")
# jj <- readJPEG("myfile.jpg",native=TRUE)
plot(0:1,0:1,type="n",ann=FALSE,axes=FALSE)
rasterImage(b$image,0,0,1,1)
reticulate::repl_python()
